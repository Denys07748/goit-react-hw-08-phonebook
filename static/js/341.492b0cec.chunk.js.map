{"version":3,"file":"static/js/341.492b0cec.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/AddContact/AddContact.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { Box } from '@mui/material';\nimport { TextField } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { container } from 'styles';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => dispatch(setFilter(e.currentTarget.value));\n\n  return (\n    <Box component=\"form\" sx={container.filter} noValidate>\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Find contacts\"\n        variant=\"outlined\"\n        onChange={handleFilterChange}\n      />\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = ({ contacts: { items } }) => items;\nexport const selectIsLoading = ({ contacts: { isLoading } }) => isLoading;\nexport const selectError = ({ contacts: { error } }) => error;\nexport const selectFilter = ({ filter }) => filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (items, filter) => {\n    if (!filter) {\n      return items;\n    }\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  border-radius: 8px;\n  padding: 10px;\n  margin: auto;\n\n  label {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n  }\n\n  input {\n    margin-top: 6px;\n    outline: none;\n  }\n\n  div {\n    color: #df0707;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { FormEl } from './ContactForm.styled';\nimport { Button } from '@mui/material';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst {\n  validName: { checkName, messageName },\n  validNum: { checkNum, messageNum },\n} = {\n  validName: {\n    checkName: /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n    messageName: 'Name may contain only letters',\n  },\n  validNum: {\n    checkNum:\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n    messageNum: 'Phone number must be digits',\n  },\n};\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(checkName, messageName)\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(checkNum, messageNum)\n    .required('Number is required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = ({ onClose }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const isIncludes = contacts.some(\n      ({ name, number }) =>\n        name.toLowerCase() === values.name.toLowerCase() ||\n        number === values.number\n    );\n    if (isIncludes) {\n      alert('A contact with the same name or number is already in contacts');\n      return;\n    }\n\n    dispatch(addContact(values));\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormEl>\n        <label htmlFor=\"name\">\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </label>\n        <Button variant=\"contained\" type=\"submit\">\n          Add\n        </Button>\n      </FormEl>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport { Icon } from '@mui/material';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { container, icon } from 'styles';\n\nconst AddContact = () => {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <Box sx={container.addContact}>\n      <Icon sx={icon.addContact} onClick={handleOpen}>\n        add_circle\n      </Icon>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={container.contactForm}>\n          <ContactForm onClose={handleClose} />\n        </Box>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default AddContact;\n","import {\n  Container,\n  TableContainer,\n  Table,\n  TableHead,\n  TableCell,\n  TableRow,\n  TableBody,\n  Paper,\n  Typography,\n  Box,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Filter from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport AddContact from 'components/AddContact/AddContact';\nimport { container, icon, table } from 'styles';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Container sx={container.contactList}>\n      {contacts.length === 0 ? (\n        <Box sx={container.contactHead}>\n          <Typography variant=\"h7\">\n            There are no contacts in your phone book yet. Please add contacts.\n          </Typography>\n          <AddContact />\n        </Box>\n      ) : (\n        <>\n          <Box sx={container.contactHead}>\n            <Filter />\n            <Box sx={container.contactHead}>\n              <Typography variant=\"h7\" mr={1}>\n                Add contact\n              </Typography>\n              <AddContact />\n            </Box>\n          </Box>\n          {visibleContacts.length === 0 ? (\n            <p>Contacts not found</p>\n          ) : (\n            <TableContainer component={Paper}>\n              <Table sx={table.tableContacts} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow sx={table.tableRowHead}>\n                    <TableCell sx={table.tableCell}>Name</TableCell>\n                    <TableCell align=\"center\" sx={table.tableCell}>\n                      Number\n                    </TableCell>\n                    <TableCell align=\"right\" sx={table.tableCell}>\n                      Delete\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {visibleContacts.map(({ id, name, number }) => (\n                    <TableRow key={id} sx={table.tableRowContact}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {name}\n                      </TableCell>\n                      <TableCell align=\"center\">{number}</TableCell>\n                      <TableCell align=\"right\">\n                        <DeleteIcon\n                          sx={icon.deleteIcon}\n                          onClick={() => dispatch(deleteContact(id))}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default ContactList;\n","import { fetchContacts } from 'redux/contacts/operations';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Box } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box sx={{ pt: 2 }}>\n      <div>{isLoading && !error && 'Request in progress...'}</div>\n      <ContactList />\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["dispatch","useDispatch","Box","component","sx","container","noValidate","TextField","id","label","variant","onChange","e","setFilter","currentTarget","value","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","normalizedFilter","toLowerCase","name","includes","FormEl","styled","Form","checkName","messageName","checkNum","messageNum","schema","yup","shape","matches","required","number","initialValues","onClose","useSelector","validationSchema","onSubmit","values","resetForm","some","alert","addContact","htmlFor","type","Button","React","open","setOpen","handleClose","Icon","icon","onClick","Modal","visibleContacts","Container","length","Typography","mr","TableContainer","Paper","Table","table","TableHead","TableRow","TableCell","align","TableBody","map","scope","Delete","deleteContact","useEffect","fetchContacts","pt"],"sourceRoot":""}